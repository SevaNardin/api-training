plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.2'
    id 'org.gradle.test-retry' version '1.5.2'
}

group 'ru.mos.qa'
version '1.0-SNAPSHOT'

def jupiterVersion = "5.9.2",
    selenideVersion = "6.14.0",
    allureVersion = "2.19.0",
    ownerVersion = "1.0.4",
    assertjVersion = "3.24.2",
    restAssuredVersion = "5.3.0",
    jacksonVersion = "2.15.0",
    fakerVersion = "0.15"

allure {
    report {
        version.set("2.19.0")
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set("2.19.0")
            }
        }
    }
}

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

dependencies {
    testImplementation(
            "org.junit.jupiter:junit-jupiter:$jupiterVersion",
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "org.assertj:assertj-core:$assertjVersion",
            "org.aeonbits.owner:owner:$ownerVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
            "com.github.javafaker:javafaker:$fakerVersion"
    )
    testRuntimeOnly 'org.slf4j:slf4j-simple:2.0.7'
    testCompileOnly 'org.projectlombok:lombok:1.18.26'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'
}

test {
    // параллельный запуск тестов
//    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    useJUnitPlatform()
    retry {
        maxRetries = 0
        maxFailures = 15
        failOnPassedAfterRetry = true
    }
    // gradle clean test -Dstage=testing
    systemProperties(System.getProperties())
}